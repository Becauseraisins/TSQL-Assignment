-- IF OBJECT_ID('Main') IS NOT NULL DROP DATABASE MAIN;
-- CREATE DATABASE MAIN;
USE  MAIN;
IF OBJECT_ID('Sale') IS NOT NULL DROP TABLE SALE;
IF OBJECT_ID('Product') IS NOT NULL DROP TABLE PRODUCT;
IF OBJECT_ID('Customer') IS NOT NULL DROP TABLE CUSTOMER;
IF OBJECT_ID('Location') IS NOT NULL DROP TABLE LOCATION;
IF OBJECT_ID('ADD_PRODUCT') IS NOT NULL DROP PROCEDURE ADD_PRODUCT;
IF OBJECT_ID('ADD_CUSTOMER') IS NOT NULL DROP PROCEDURE ADD_CUSTOMER ;
IF OBJECT_ID('GET_CUSTOMER_STRING') IS NOT NULL DROP PROCEDURE GET_CUSTOMER_STRING;
IF OBJECT_ID('DELETE_ALL_CUSTOMERS') IS NOT NULL DROP PROCEDURE DELETE_ALL_CUSTOMERS;
IF OBJECT_ID('DELETE_ALL_PRODUCTS') IS NOT NULL DROP PROCEDURE DELETE_ALL_PRODUCTS;
IF OBJECT_ID('UPD_CUST_SALESYTD') IS NOT NULL DROP PROCEDURE UPD_CUST_SALESYTD;

GO

CREATE TABLE CUSTOMER
(
    CUSTID INT,
    CUSTNAME NVARCHAR(100),
    SALES_YTD MONEY,
    STATUS NVARCHAR(7),
    PRIMARY KEY(CUSTID)
);

CREATE TABLE PRODUCT
(
    PRODID INT,
    PRODNAME NVARCHAR(100),
    SELLING_PRICE MONEY,
    SALES_YTD MONEY,
    PRIMARY KEY(PRODID)
)

CREATE TABLE SALE
(
    SALEID BIGINT,
    CUSTID INT,
    PRODID INT,
    QTY INT,
    PRICE MONEY,
    SALEDATE DATE,
    PRIMARY KEY (SALEID),
    FOREIGN KEY (CUSTID) REFERENCES CUSTOMER,
    FOREIGN KEY (PRODID) REFERENCES PRODUCT
);

CREATE TABLE LOCATION
(
    LOCID NVARCHAR
(5),
    MINQTY INTEGER,
    MAXQTY INTEGER,
    PRIMARY KEY(LOCID),
    CONSTRAINT CHECK_LOCID_LENGTH CHECK
(LEN(LOCID) = 5),
    CONSTRAINT CHECK_MINQTY_RANGE CHECK
(MINQTY BETWEEN 0 AND 999),
    CONSTRAINT CHECK_MAXQTY_RANGE CHECK
(MAXQTY BETWEEN 0 AND 999),
    CONSTRAINT CHECK_MAXQTY_GREATER_MIXQTY CHECK
(MAXQTY >= MINQTY)
);

IF OBJECT_ID('SALE_SEQ') IS NOT NULL DROP SEQUENCE SALE_SEQ;
CREATE SEQUENCE SALE_SEQ;

GO
CREATE PROCEDURE ADD_CUSTOMER
    @NEWCUSTID INT,
    @NEWCUSTNAME NVARCHAR(100)
AS
BEGIN
    BEGIN TRY
IF @NEWCUSTID < 1 OR @NEWCUSTID > 499 
THROW 50020, 'Customer out of range', 1
INSERT INTO CUSTOMER
        (CUSTID, CUSTNAME, SALES_YTD, STATUS)
    VALUES
        (@NEWCUSTID, @NEWCUSTNAME, 0, 'OK')
END TRY
BEGIN CATCH
IF ERROR_NUMBER() = 50020
THROW
ELSE IF ERROR_NUMBER()= 2627
THROW 50010, 'Duplicate primary key', 1
ELSE 
BEGIN
        DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
        THROW 50000, @ERRORMESSAGE, 1
    END
END CATCH
END

GO
CREATE PROCEDURE DELETE_ALL_CUSTOMERS
AS
BEGIN
    BEGIN TRY
DELETE FROM CUSTOMER
END TRY
BEGIN CATCH
BEGIN
        DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
        THROW 50000, @ERRORMESSAGE, 1
    END 
END CATCH
END

GO
CREATE PROCEDURE ADD_PRODUCT
    @PPRODID INT,
    @PPRODNAME NVARCHAR,
    @PPRICE MONEY
AS
BEGIN
    BEGIN TRY
IF @PPRODID <1000 OR @PPRODID >2500
THROW 50040, 'Product ID out of range', 1
IF @PPRICE <0 OR @PPRICE >999.99
THROW 50050, 'Price out of range', 1
INSERT INTO PRODUCT
        (PRODID,PRODNAME, SELLING_PRICE, SALES_YTD)
    VALUES
        (@PPRODID, @PPRODNAME, @PPRICE, 0)
END TRY
BEGIN CATCH
IF ERROR_NUMBER()= 50040 OR ERROR_NUMBER()=50050
THROW
ELSE IF ERROR_NUMBER()= 2627
THROW 50010, 'Duplicate primary key', 1
ELSE BEGIN
        DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
        THROW 50000, @ERRORMESSAGE, 1
    END 
END CATCH
END

GO
CREATE PROCEDURE DELETE_ALL_PRODUCTS
AS
BEGIN
    BEGIN TRY
DELETE FROM PRODUCT
END TRY
BEGIN CATCH
DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
THROW 50000, @ERRORMESSAGE, 1 
END CATCH
END

GO
CREATE PROCEDURE GET_CUSTOMER_STRING
    @PCUSTID INT,
    @PRETURNSTRING NVARCHAR(1000) OUTPUT
AS
BEGIN
    DECLARE @CUSTNAME NVARCHAR(100), @STATUS NVARCHAR(7), @YTD MONEY
    BEGIN TRY
SELECT @CUSTNAME = CUSTNAME, @STATUS = STATUS, @YTD = SALES_YTD
    FROM CUSTOMER
    WHERE @PCUSTID = CUSTID 
IF @@ROWCOUNT = 0 
THROW 50060, 'Customer ID not found', 1
SET @PRETURNSTRING = CONCAT('Custid: ',@PCUSTID, ' Name: ',@CUSTNAME, ' Status: ',@STATUS, ' Sales YTD: ', @YTD)
PRINT @PRETURNSTRING
END TRY
BEGIN CATCH
IF ERROR_MESSAGE()=50060
THROW
ELSE 
BEGIN
        DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
        THROW 50000, @ERRORMESSAGE, 1
    END
END CATCH
END

GO
CREATE PROCEDURE UPD_CUST_SALESYTD
    @PCUSTID INT,
    @PAMT MONEY
AS
BEGIN
    BEGIN TRY
IF @PAMT < -999.99 OR @PAMT > 999.99
THROW 50080, 'Amount out of range',1
UPDATE CUSTOMER
SET SALES_YTD = (SALES_YTD + @PAMT) 
    WHERE @PCUSTID = CUSTID
IF @@ROWCOUNT = 0 
THROW 50070, 'Customer ID not found', 1
END TRY
BEGIN CATCH
IF ERROR_MESSAGE()= 50090
THROW
ELSE IF  ERROR_MESSAGE()=50070
THROW
ELSE
BEGIN
        DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
        THROW 50000, @ERRORMESSAGE, 1
    END
END CATCH
END

GO
EXEC ADD_CUSTOMER @NEWCUSTID = 1, @NEWCUSTNAME = 'matt';

EXEC GET_CUSTOMER_STRING @PCUSTID = 1, @PRETURNSTRING = 0

EXEC UPD_CUST_SALESYTD @PCUSTID= 1, @PAMT= -10000
EXEC GET_CUSTOMER_STRING @PCUSTID = 1, @PRETURNSTRING = 0