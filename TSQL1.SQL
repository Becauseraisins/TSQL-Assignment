-- IF OBJECT_ID('Main') IS NOT NULL DROP DATABASE MAIN;
-- CREATE DATABASE MAIN;
USE  MAIN;
--DROP TABLE
IF OBJECT_ID('Sale') IS NOT NULL DROP TABLE SALE;
IF OBJECT_ID('Product') IS NOT NULL DROP TABLE PRODUCT;
IF OBJECT_ID('Customer') IS NOT NULL DROP TABLE CUSTOMER;
IF OBJECT_ID('Location') IS NOT NULL DROP TABLE LOCATION;
IF OBJECT_ID('ADD_PRODUCT') IS NOT NULL DROP PROCEDURE ADD_PRODUCT;
IF OBJECT_ID('ADD_CUSTOMER') IS NOT NULL DROP PROCEDURE ADD_CUSTOMER ;
IF OBJECT_ID('GET_CUSTOMER_STRING') IS NOT NULL DROP PROCEDURE GET_CUSTOMER_STRING;
IF OBJECT_ID('DELETE_ALL_CUSTOMERS') IS NOT NULL DROP PROCEDURE DELETE_ALL_CUSTOMERS;
IF OBJECT_ID('DELETE_ALL_PRODUCTS') IS NOT NULL DROP PROCEDURE DELETE_ALL_PRODUCTS;
IF OBJECT_ID('UPD_CUST_SALESYTD') IS NOT NULL DROP PROCEDURE UPD_CUST_SALESYTD;
IF OBJECT_ID('GET_PRODUCT_STRING') IS NOT NULL DROP PROCEDURE GET_PRODUCT_STRING;
IF OBJECT_ID('UPD_PROD_SALESYTD') IS NOT NULL DROP PROCEDURE UPD_PROD_SALESYTD;
IF OBJECT_ID('UPD_CUSTOMER_STATUS') IS NOT NULL DROP PROCEDURE UPD_CUSTOMER_STATUS;
IF OBJECT_ID('ADD_SIMPLE_SALE') IS NOT NULL DROP PROCEDURE ADD_SIMPLE_SALE;
IF OBJECT_ID('SUM_CUSTOMER_SALESYTD') IS NOT NULL DROP PROCEDURE SUM_CUSTOMER_SALESYTD;
IF OBJECT_ID('SUM_PRODUCT_SALESYTD') IS NOT NULL DROP PROCEDURE SUM_PRODUCT_SALESYTD;
IF OBJECT_ID('GET_ALL_CUSTOMERS') IS NOT NULL DROP PROCEDURE GET_ALL_CUSTOMERS;
IF OBJECT_ID('GET_ALL_PRODUCTS') IS NOT NULL DROP PROCEDURE GET_ALL_PRODUCTS;
IF OBJECT_ID('ADD_LOCATION') IS NOT NULL DROP PROCEDURE ADD_LOCATION;
IF OBJECT_ID('ADD_COMPLEX_SALE') IS NOT NULL DROP PROCEDURE ADD_COMPLEX_SALE;
IF OBJECT_ID('GET_ALLSALES') IS NOT NULL DROP PROCEDURE GET_ALLSALES;
IF OBJECT_ID('COUNT_PRODUCT_SALES') IS NOT NULL DROP PROCEDURE COUNT_PRODUCT_SALES;
IF OBJECT_ID('DELETE_SALE') IS NOT NULL DROP PROCEDURE DELETE_SALE;
IF OBJECT_ID('DELETE_ALL_SALES') IS NOT NULL DROP PROCEDURE DELETE_ALL_SALES;
IF OBJECT_ID('DELETE_CUSTOMER') IS NOT NULL DROP PROCEDURE DELETE_CUSTOMER;
IF OBJECT_ID('DELETE_PRODUCT') IS NOT NULL DROP PROCEDURE DELETE_PRODUCT;
GO

CREATE TABLE CUSTOMER
(
    CUSTID INT,
    CUSTNAME NVARCHAR(100),
    SALES_YTD MONEY,
    STATUS NVARCHAR(7),
    PRIMARY KEY(CUSTID)
);

CREATE TABLE PRODUCT
(
    PRODID INT,
    PRODNAME NVARCHAR(100),
    SELLING_PRICE MONEY,
    SALES_YTD MONEY,
    PRIMARY KEY(PRODID)
)

CREATE TABLE SALE
(
    SALEID BIGINT,
    CUSTID INT,
    PRODID INT,
    QTY INT,
    PRICE MONEY,
    SALEDATE DATE,
    PRIMARY KEY (SALEID),
    FOREIGN KEY (CUSTID) REFERENCES CUSTOMER,
    FOREIGN KEY (PRODID) REFERENCES PRODUCT
);

CREATE TABLE LOCATION
(
    LOCID NVARCHAR
(5),
    MINQTY INTEGER,
    MAXQTY INTEGER,
    PRIMARY KEY(LOCID),
    CONSTRAINT CHECK_LOCID_LENGTH CHECK
(LEN(LOCID) = 5),
    CONSTRAINT CHECK_MINQTY_RANGE CHECK
(MINQTY BETWEEN 0 AND 999),
    CONSTRAINT CHECK_MAXQTY_RANGE CHECK
(MAXQTY BETWEEN 0 AND 999),
    CONSTRAINT CHECK_MAXQTY_GREATER_MIXQTY CHECK
(MAXQTY >= MINQTY)
);

IF OBJECT_ID('SALE_SEQ') IS NOT NULL DROP SEQUENCE SALE_SEQ;
CREATE SEQUENCE SALE_SEQ
START WITH 1 
INCREMENT BY 1;

GO
CREATE PROCEDURE ADD_CUSTOMER
    @NEWCUSTID INT,
    @NEWCUSTNAME NVARCHAR(100)
AS
BEGIN
    BEGIN TRY
IF @NEWCUSTID < 1 OR @NEWCUSTID > 499 
THROW 50020, 'Customer out of range', 1
INSERT INTO CUSTOMER
        (CUSTID, CUSTNAME, SALES_YTD, STATUS)
    VALUES
        (@NEWCUSTID, @NEWCUSTNAME, 0, 'OK')
END TRY
BEGIN CATCH
IF ERROR_NUMBER() = 50020
THROW
ELSE IF ERROR_NUMBER()= 2627
THROW 50010, 'Duplicate primary key', 1
ELSE 
BEGIN
        DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
        THROW 50000, @ERRORMESSAGE, 1
    END
END CATCH
END

GO
CREATE PROCEDURE DELETE_ALL_CUSTOMERS
AS
BEGIN
    BEGIN TRY
DELETE FROM CUSTOMER
END TRY
BEGIN CATCH
BEGIN
        DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
        THROW 50000, @ERRORMESSAGE, 1
    END 
END CATCH
END

GO
CREATE PROCEDURE ADD_PRODUCT
    @PPRODID INT,
    @PPRODNAME NVARCHAR(100),
    @PPRICE MONEY
AS
BEGIN
    BEGIN TRY
IF @PPRODID <1000 OR @PPRODID >2500
THROW 50040, 'Product ID out of range', 1
IF @PPRICE <0 OR @PPRICE >999.99
THROW 50050, 'Price out of range', 1
INSERT INTO PRODUCT
        (PRODID,PRODNAME, SELLING_PRICE, SALES_YTD)
    VALUES
        (@PPRODID, @PPRODNAME, @PPRICE, 0)
END TRY
BEGIN CATCH
IF ERROR_NUMBER() in (50040,50050)
THROW
ELSE IF ERROR_NUMBER()= 2627
THROW 50010, 'Duplicate primary key', 1
ELSE BEGIN
        DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
        THROW 50000, @ERRORMESSAGE, 1
    END 
END CATCH
END

GO
CREATE PROCEDURE DELETE_ALL_PRODUCTS
AS
BEGIN
    BEGIN TRY
DELETE FROM PRODUCT
END TRY
BEGIN CATCH
DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
THROW 50000, @ERRORMESSAGE, 1 
END CATCH
END

GO
CREATE PROCEDURE GET_CUSTOMER_STRING
    @PCUSTID INT
AS
BEGIN
    DECLARE @CUSTNAME NVARCHAR(100), @STATUS NVARCHAR(7), @YTD MONEY,@PRETURNSTRING NVARCHAR(1000)
    BEGIN TRY
SELECT @CUSTNAME = CUSTNAME, @STATUS = STATUS, @YTD = SALES_YTD
    FROM CUSTOMER
    WHERE @PCUSTID = CUSTID 
IF @@ROWCOUNT = 0 
THROW 50060, 'Customer ID not found', 1
SET @PRETURNSTRING = CONCAT('Custid: ',@PCUSTID, ' Name: ',@CUSTNAME, ' Status: ',@STATUS, ' Sales YTD: ', @YTD)
PRINT @PRETURNSTRING
END TRY
BEGIN CATCH
IF ERROR_MESSAGE()=50060
THROW
ELSE 
BEGIN
        DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
        THROW 50000, @ERRORMESSAGE, 1
    END
END CATCH
END

GO
CREATE PROCEDURE UPD_CUST_SALESYTD
    @PCUSTID INT,
    @PAMT MONEY
AS
BEGIN
    BEGIN TRY
IF @PAMT < -999.99 OR @PAMT > 999.99
THROW 50080, 'Amount out of range',1
UPDATE CUSTOMER
SET SALES_YTD = (SALES_YTD + @PAMT) 
    WHERE @PCUSTID = CUSTID
IF @@ROWCOUNT = 0 
THROW 50070, 'Customer ID not found', 1
END TRY
BEGIN CATCH
If ERROR_NUMBER() IN (50070, 50080)
THROW
ELSE
BEGIN
        DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
        THROW 50000, @ERRORMESSAGE, 1
    END
END CATCH
END

GO
CREATE PROCEDURE GET_PRODUCT_STRING
    @PPRODID INT,
    @PRETURNSTRING NVARCHAR(100)
AS
BEGIN
    DECLARE    
        @PRODID INT,
        @PRODNAME NVARCHAR(100),
    @SELLING_PRICE MONEY,
    @SALES_YTD MONEY
    BEGIN TRY
    SELECT @PRODID = PRODID, @PRODNAME = PRODNAME, @SELLING_PRICE = SELLING_PRICE, @SALES_YTD = SALES_YTD
    FROM PRODUCT
    WHERE @PPRODID = PRODID
    IF @@ROWCOUNT = 0
    THROW 50090, 'Product ID not found', 1
    SET @PRETURNSTRING = CONCAT('Prodid: ', @PRODID, ' Name:', @PRODNAME,  ' Price: ', @SELLING_PRICE, ' SalesYTD: ', @SALES_YTD)
    PRINT @PRETURNSTRING
    END TRY
    BEGIN CATCH
    IF ERROR_NUMBER()= 50090
    THROW
    BEGIN
        DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
        THROW 50000, @ERRORMESSAGE, 1
    END
    END CATCH
END

GO
CREATE PROCEDURE UPD_PROD_SALESYTD
    @PPRODID INT,
    @PAMT MONEY
AS
BEGIN
    BEGIN TRY
   IF @PAMT < -999.99 OR @PAMT > 999.99
THROW 50110, 'Amount out of range',1
UPDATE PRODUCT
SET SALES_YTD = (SALES_YTD + @PAMT) 
    WHERE @PPRODID = PRODID
IF @@ROWCOUNT = 0 
THROW 50100, 'Product ID not found', 1
END TRY
BEGIN CATCH
IF ERROR_NUMBER() IN (50110, 50100)
THROW 
    BEGIN
        DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
        THROW 50000, @ERRORMESSAGE, 1
    END
END CATCH
END 

GO
CREATE PROCEDURE UPD_CUSTOMER_STATUS
    @PCUSTID INT,
    @PSTATUS NVARCHAR
AS
BEGIN TRY  
IF @PSTATUS NOT IN ('OK', 'SUSPEND')
THROW 50130,'Invalid status sample',1 
UPDATE CUSTOMER
SET [STATUS] = @PSTATUS
WHERE CUSTID = @PCUSTID
IF @@ROWCOUNT = 0 
THROW 50120,'Customer ID not found',1 
END TRY
BEGIN CATCH
IF ERROR_NUMBER() IN (50120, 50130)
THROW
    BEGIN
    DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
    THROW 50000, @ERRORMESSAGE, 1
END
END CATCH

GO
CREATE PROCEDURE ADD_SIMPLE_SALE
    @PCUSTID INT,
    @PPRODID INT,
    @PQTY INT
AS
BEGIN TRY 
DECLARE @PRICETOTAL MONEY,
@SELLING_PRICE MONEY,
@STATUS NVARCHAR
IF @PQTY <1 OR @PQTY >999
THROW 50140,'Sale Quantity outside valid ranges',1
SELECT @SELLING_PRICE = SELLING_PRICE
FROM PRODUCT
WHERE PRODID = @PPRODID
SELECT @STATUS =[STATUS]
FROM CUSTOMER
WHERE @PCUSTID = CUSTID
IF @STATUS = 'SUSPENDED'
THROW 50150,'Customer status is not OK ',1 
SET @PRICETOTAL = (@SELLING_PRICE * @PQTY)
EXEC UPD_CUST_SALESYTD @PCUSTID = @PCUSTID, @PAMT = @PRICETOTAL 
EXEC UPD_PROD_SALESYTD @PPRODID = @PPRODID, @PAMT = @PRICETOTAL
END TRY
BEGIN CATCH
IF ERROR_NUMBER() IN (50140,50150)
THROW
    BEGIN
    DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
    THROW 50000, @ERRORMESSAGE, 1
END
END CATCH

GO
CREATE PROCEDURE SUM_CUSTOMER_SALESYTD
AS
BEGIN TRY 
DECLARE @RETURNSTRING NVARCHAR(100),
@SALES INT
SELECT @SALES = SUM(SALES_YTD)
FROM
    CUSTOMER 
SET @RETURNSTRING = CONCAT('Sum of customer sales: ', @SALES)
PRINT @RETURNSTRING
END TRY
BEGIN CATCH
    BEGIN
    DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
    THROW 50000, @ERRORMESSAGE, 1
END
END CATCH

GO
CREATE PROCEDURE SUM_PRODUCT_SALESYTD
AS
BEGIN TRY 
DECLARE @RETURNSTRING NVARCHAR(100),
@SALES INT
SELECT @SALES = SUM(SALES_YTD)
FROM
    PRODUCT
SET @RETURNSTRING = CONCAT('Sum of product sales: ', @SALES)
PRINT @RETURNSTRING
END TRY
BEGIN CATCH
    BEGIN
    DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
    THROW 50000, @ERRORMESSAGE, 1
END
END CATCH

GO
CREATE PROCEDURE GET_ALL_CUSTOMERS
AS
BEGIN TRY
DECLARE
@CUSTNAME NVARCHAR(100)
DECLARE POUTCUR CURSOR
FOR SELECT CUSTNAME
FROM CUSTOMER
OPEN POUTCUR
FETCH NEXT FROM POUTCUR INTO
@CUSTNAME
WHILE @@FETCH_STATUS = 0
BEGIN
    PRINT @CUSTNAME;
    FETCH NEXT FROM POUTCUR INTO
@CUSTNAME
END 
CLOSE POUTCUR 
DEALLOCATE POUTCUR 

END TRY
BEGIN CATCH 
    BEGIN
    DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
    THROW 50000, @ERRORMESSAGE, 1
END
END CATCH 

GO
CREATE PROCEDURE GET_ALL_PRODUCTS
AS
BEGIN TRY
DECLARE
@PRODNAME NVARCHAR(100)
DECLARE POUTCUR CURSOR
FOR SELECT PRODNAME
FROM PRODUCT
OPEN POUTCUR
FETCH NEXT FROM POUTCUR INTO
@PRODNAME
WHILE @@FETCH_STATUS = 0
BEGIN
    PRINT @PRODNAME;
    FETCH NEXT FROM POUTCUR INTO
@PRODNAME
END 
CLOSE POUTCUR 
DEALLOCATE POUTCUR 

END TRY
BEGIN CATCH 
    BEGIN
    DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
    THROW 50000, @ERRORMESSAGE, 1
END
END CATCH 

GO
CREATE PROCEDURE ADD_LOCATION
    @PLOCCODE NVARCHAR(5),
    @PMINQTY INT,
    @PMAXQTY INT
AS
BEGIN TRY 
IF LEN(@PLOCCODE) NOT LIKE 5
THROW 50190, 'Location code length invalid', 1
IF @PMINQTY >999 OR @PMINQTY <0
THROW 50200,'Minimum quantity out of range',1
IF @PMAXQTY >999 OR @PMAXQTY <0
THROW 50200, 'Maximum quantity out of range', 1 
IF @PMINQTY > @PMAXQTY
THROW 50220, 'Minimum quantity greater than maximum quantity', 1
INSERT INTO [LOCATION]
    (LOCID, MINQTY, MAXQTY)
VALUES
    (@PLOCCODE, @PMINQTY, @PMAXQTY)
END TRY
BEGIN CATCH
IF ERROR_NUMBER() IN (50190, 50200, 50210 , 50220)
THROW
ELSE IF ERROR_NUMBER()= 2627
THROW 50180, 'Duplicate primary key', 1
ELSE 
BEGIN
    DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
    THROW 50000, @ERRORMESSAGE, 1
END
END CATCH

GO
CREATE PROCEDURE ADD_COMPLEX_SALE
    @PCUSTID INT,
    @PPRODID INT,
    @PQTY INT,
    @PDATE NVARCHAR(8)
AS
BEGIN TRY
DECLARE 
@SELLING_PRICE MONEY,
@STATUS NVARCHAR,
@SALE_SEQ INT,
@PRICE_TOTAL INT

IF @PQTY <1 OR @PQTY >999
THROW 50230,'Sale Quantity outside valid ranges',1

IF LEN(@PDATE) <8 
THROW 50250, 'Date not valid', 1

SELECT @STATUS =[STATUS]
FROM CUSTOMER
WHERE @PCUSTID = CUSTID

IF @@ROWCOUNT = 0
THROW 50260, 'Customer ID is not valid', 1 

IF @STATUS = 'SUSPENDED'
THROW 50240,'Customer status is not OK ',1 

SELECT @SELLING_PRICE = SELLING_PRICE
FROM PRODUCT
WHERE PRODID = @PPRODID

if @@ROWCOUNT = 0
THROW 50270, 'Product ID is not valid', 1 

SELECT @SALE_SEQ = NEXT VALUE FOR SALE_SEQ
INSERT INTO SALE
    (SALEID,CUSTID, PRODID, QTY, PRICE, SALEDATE)
VALUES
    (@SALE_SEQ , @PCUSTID, @PPRODID, @PQTY, @SELLING_PRICE, @PDATE)
SET @PRICE_TOTAL = @PQTY * @SELLING_PRICE
EXEC UPD_CUST_SALESYTD @PCUSTID = @PCUSTID, @PAMT = @PRICE_TOTAL
EXEC UPD_PROD_SALESYTD @PPRODID = @PPRODID, @PAMT = @PRICE_TOTAL

END TRY
BEGIN CATCH
IF ERROR_NUMBER() IN (50230,50240)
THROW 
ELSE 
BEGIN
    DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
    THROW 50000, @ERRORMESSAGE, 1
END
END CATCH

GO 
CREATE PROCEDURE GET_ALLSALES
AS
BEGIN TRY
DECLARE
@SALEID NVARCHAR(100)
DECLARE POUTCUR CURSOR
FOR SELECT SALEID, CUSTID, PRODID, QTY , PRICE, SALEDATE
FROM SALE
OPEN POUTCUR
FETCH NEXT FROM POUTCUR INTO
@SALEID
WHILE @@FETCH_STATUS = 0
BEGIN
    PRINT @SALEID;
    FETCH NEXT FROM POUTCUR INTO
@CUSTNAME
END 
CLOSE POUTCUR 
DEALLOCATE POUTCUR 

END TRY
BEGIN CATCH 
    BEGIN
    DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
    THROW 50000, @ERRORMESSAGE, 1
END
END CATCH 

GO
CREATE PROCEDURE COUNT_PRODUCT_SALES
    @PDAYS INT,
    @RETURNCOUNT INT OUTPUT
AS
BEGIN
    BEGIN TRY
        SELECT COUNT(SALEID)
    FROM SALE
    WHERE SALEDATE >= (GETDATE()-@PDAYS)
    END TRY
BEGIN CATCH
    
END CATCH
END 




GO
--TESTING
EXEC ADD_CUSTOMER @NEWCUSTID = 1, @NEWCUSTNAME = 'Matt';
EXEC ADD_CUSTOMER @NEWCUSTID = 2 , @NEWCUSTNAME = 'Michaela';
EXEC GET_CUSTOMER_STRING @PCUSTID = 1
EXEC UPD_CUST_SALESYTD @PCUSTID= 1, @PAMT= -100;
EXEC GET_CUSTOMER_STRING @PCUSTID = 1
EXEC ADD_PRODUCT @PPRODID = 1001, @PPRODNAME = 'test', @PPRICE = $50;
EXEC ADD_PRODUCT @PPRODID =1002, @PPRODNAME = 'GUM', @PPRICE = $1;
EXEC GET_PRODUCT_STRING @PPRODID =1001, @PRETURNSTRING = 'A';
EXEC UPD_PROD_SALESYTD @PPRODID = 1001, @PAMT = 100;
EXEC ADD_SIMPLE_SALE @PCUSTID = 1, @PPRODID = 1001, @PQTY = 10
EXEC SUM_CUSTOMER_SALESYTD
EXEC SUM_PRODUCT_SALESYTD
EXEC GET_ALL_CUSTOMERS
EXEC GET_ALL_PRODUCTS
EXEC ADD_LOCATION @PLOCCODE = 31131, @PMINQTY = 1, @PMAXQTY = 1
EXEC ADD_COMPLEX_SALE @PCUSTID = 2, @PPRODID = 1002, @PQTY = 1, @PDATE = 20210818
GO
--VIEW FULL DATABASE 
SELECT *
FROM CUSTOMER
SELECT *
FROM SALE
SELECT *
FROM PRODUCT
SELECT *
FROM [LOCATION]

-- ERROR TESTING 

--EXEC ADD_CUSTOMER @NEWCUSTID = 99999, @NEWCUSTNAME = 'Matt';
--EXEC ADD_CUSTOMER @NEWCUSTID = 0 , @NEWCUSTNAME = 'Michaela';
--EXEC GET_CUSTOMER_STRING @PCUSTID = 3
--EXEC UPD_CUST_SALESYTD @PCUSTID= 1, @PAMT= -99999;
--EXEC ADD_PRODUCT @PPRODID = 100, @PPRODNAME = 'test', @PPRICE = $-1;
--EXEC ADD_PRODUCT @PPRODID =1002, @PPRODNAME = 'GUM', @PPRICE = $1;
--EXEC GET_PRODUCT_STRING @PPRODID =1001, @PRETURNSTRING = 'A';
--EXEC UPD_PROD_SALESYTD @PPRODID = 1001, @PAMT = 100;
--EXEC ADD_SIMPLE_SALE @PCUSTID = 1, @PPRODID = 1001, @PQTY = 10
--EXEC ADD_LOCATION @PLOCCODE = 3113, @PMINQTY = 1, @PMAXQTY = 1
--EXEC ADD_COMPLEX_SALE @PCUSTID = 2, @PPRODID = 1002, @PQTY = 1, @PDATE = 2021081